#!/usr/bin/env bash

. "./utils/shared.sh"

catch_errors

# function ok() {
#     local -ra resp=("$@")

#     echo "all is ok from ${resp[*]}"

# }

# function oops() {
#     local -i code=$1
#     local -r stdout="$2"

#     echo "shit got bad (${code})"
#     printf "%s" "${stdout}"
# }

# function hi() {
#     echo "hi"
# }


# try hi ok oops "foo bar"


# declare -rA _username=(
#     [title]="What should the sudo users' default username be?\n\nRemember that this is just a default username which you'll start with each time you create a new container."
#     [backmsg]="Moxy Preferences"
#     [width]=60
#     [height]=23
#     [ok]="Set Default Username"
#     [cancel]="Exit"
#     [on_cancel]="exit"
#     [exit_msg]="See ya"
# )

# username=$(ask_inputbox _username)

# if was_cancelled "$username"; then
#     log "was cancelled"
# else

#     log "username: ${username}"
# fi

declare -a _ARR=( "foo" "bar" "baz forever")
# typeof ARR
is_array _ARR && echo "yup, array" || echo "nope"
typeof _ARR

declare -A _ASSOC=(
     [foo]="bar"
     [ass]="hole"
)
is_assoc_array _ASSOC && echo "yup, an associative array" || echo "nope"
typeof _ASSOC  

_NUM=4
is_numeric _NUM && echo "yup, numeric" || echo "not numeric!"
typeof _NUM

_List=$(list "foo" "bar" "baz")
typeof _List

KV=$(kv "one" "two")
echo "KV type is '$(typeof KV)' = $KV"

ObjFromKv=$(object "foo=bar" "bar=baz")
echo "ObjFromKv type is '$(typeof ObjFromKv)' = ${ObjFromKv}"

ObjFromAssoc=$(object _ASSOC)
echo "ObjFromAssoc type is '$(typeof ObjFromKv)' = ${ObjFromAssoc}"

_STR="foobar"
typeof _STR

_EMPTY=""
typeof _EMPTY

log ""
MY_ARR=("foo" "bar" "baz")
_EMPTY=()

pop _EMPTY LESS_THAN_NONE
echo "Less: ${LESS_THAN_NONE}" # empty string

echo "BashID is ${BASHPID}"

pop MY_ARR VAL

echo "Popped value: ${VAL}"
echo "Remaining[${#MY_ARR[@]}]: ${MY_ARR[*]}"

while pop MY_ARR VAL; do
    echo "Popped ${VAL}"
done

while pop _ASSOC KEY VAL; do
    echo "Key: ${KEY}, Val: ${VAL}"
done
echo "Assoc array is now: ${#_ASSOC[*]}"

_SHIFTY=(1 2 3 4 5)
unshift _SHIFTY FIRST
echo "unshifting SHIFTY provides ${FIRST} and '${_SHIFTY[*]}' remains"
push _SHIFTY 6 7 8
echo "after pushing literal values to shifty: ${_SHIFTY[*]}"

echo "CONFIG: ${MOXY_CONFIG_FILE}"
ensure_directory "${HOME}/.config/moxy"


